package org.lds.intercepter;

import java.util.Enumeration;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.inject.Inject;
import javax.inject.Provider;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.lds.stack.ldsaccount.LdsAccountDetails;
import org.springframework.http.HttpStatus;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;

public class RegisterIntercepter extends HandlerInterceptorAdapter {

	@Inject
	private Provider<LdsAccountDetails> accountDetails;

	// before the actual handler will be executed
	public boolean preHandle(
			HttpServletRequest request,
			HttpServletResponse response,
			Object handler)
			throws Exception {
		Enumeration headers = request.getHeaderNames();
		//System.out.println("***** request headers *****");
		while (headers.hasMoreElements()) {
			String name = (String)headers.nextElement();
			System.out.println(name + ":" + request.getHeader(name));
		}
		String path = request.getRequestURI();
		//Pattern pat = Pattern.compile("(.[a-z]+.course)|(.[a-z]+.main)|(.[a-z]+.print)|(.[a-z]+.courses)|(.[a-z]+.paper)|(.[a-z]+.coursefeedback)|(.[a-z]+.conferencefeedback)|(.[a-z]+.feedback)|(.[a-z]+.thankyou)|(.[a-z]+.conference)|(.[a-z]+.roles)|(.[a-z]+.dashboard)|(.[a-z]+.papers)|(.[a-z]+.getserverdata)");
		Pattern pat = Pattern.compile(urlRestrictionByRole(request));
		Matcher mat = pat.matcher(path);

		if (!mat.lookingAt()) {
			// FIXME: add ?signmein if we're not signed in
			response.setHeader("Location", response.encodeRedirectURL("/conf/main"));
			response.setStatus(HttpStatus.TEMPORARY_REDIRECT.value());
			return false;
		}
		return true;
	}

	private String urlRestrictionByRole(HttpServletRequest request) {
		String userurlrestriction = null;
		try {
			//userurlrestriction = String.valueOf(request.getSession().getAttribute("userurlrestriction"));
			if(userurlrestriction ==null || userurlrestriction.equalsIgnoreCase("null") || userurlrestriction.equalsIgnoreCase("(.[a-z]+.main)")) {
				String accountid = accountDetails.get().getAccountId();
				DB db = (DB)request.getSession().getServletContext().getAttribute("mongodb");
				DBCollection coll = db.getCollection("attendees");
				BasicDBObject dbo = new BasicDBObject("accountid", accountid);
				String admin =
						"(.[a-z]+.conference)|"+
						"(.[a-z]+.dashboard)|"+
						"(.[a-z]+.getserverdata)|"+
						"(.[a-z]+.roles)|";
				String approver =
						"(.[a-z]+.courses)|"+
						"(.[a-z]+.course)|";
				String presenter =
						"(.[a-z]+.papers)|";
				String attendee =
						"(.[a-z]+.conferencefeedback)|"+
						"(.[a-z]+.confirmed)|"+
						"(.[a-z]+.coursefeedback)|"+
						"(.[a-z]+.feedback)|"+
						"(.[a-z]+.main)|"+
						"(.[a-z]+.paper)|"+
						"(.[a-z]+.print)|"+
						"(.[a-z]+.quit)|"+
						"(.[a-z]+.schedule)|"+
						"(.[a-z]+.thankyou)|"+
						"(.[a-z]+.unregister)";

				DBCursor cursor = coll.find(dbo);
				if (cursor.hasNext()) {
					dbo = (BasicDBObject)cursor.next();
					if (Boolean.valueOf(dbo.getString("admin"))) {
						userurlrestriction = admin+approver+presenter+attendee;
					} else if (Boolean.valueOf(dbo.getString("approver"))) {
						userurlrestriction = approver+presenter+attendee;
					} else if (Boolean.valueOf(dbo.getString("presenter"))) {
						userurlrestriction = presenter+attendee;
					} else {
						userurlrestriction = attendee;
					}
				} else {
					userurlrestriction =
							"(.[a-z]+.main)|"+
							"(.[a-z]+.register)";
				}
				request.getSession().setAttribute("userurlrestriction", userurlrestriction);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return userurlrestriction;
	}
}
